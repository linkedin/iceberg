/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

if (project.hasProperty('release') && jdkVersion != '8') {
  throw new GradleException("Releases must be built with Java 8")
}

subprojects {
  apply plugin: 'maven' // make pom files for deployment
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    group 'build'
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    group 'build'
  }

  task testJar(type: Jar) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
  }

  artifacts {
    archives sourceJar
    archives javadocJar
    archives testJar
    testArtifacts testJar
  }

  // add LICENSE and NOTICE
  [jar, sourceJar, javadocJar, testJar].each { task ->
    task.from(rootDir) {
      include 'LICENSE'
      include 'NOTICE'
    }
  }

  publishing {
    publications {
      javaLibrary(MavenPublication) {
        if (tasks.matching({task -> task.name == 'shadowJar'}).isEmpty()) {
          from components.java
        } else {
          project.shadow.component(it)
        }

        artifact sourceJar
        artifact javadocJar
        artifact testJar

        versionMapping {
          allVariants {
            fromResolutionResult()
          }
        }

        groupId = 'com.linkedin.iceberg'
        artifactId = project.archivesBaseName

        pom {
          name = artifactId
          description = 'A table format for huge analytic datasets'
          url = 'https://github.com/linkedin/iceberg'
          licenses {
            license {
              name = 'The Apache Software License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }
          developers {
            [
              'wmoustafa:Walaa Eldin Moustafa',
              'funcheetah:Wenye Zhang',
              'shardulm94:Shardul Mahadik',
              'hotsushi:Sushant Raikar',
              'rzhang10:Raymond Zhang',
              'yiqiangin:Yiqiang Ding',
              'ljfgem:Jiefan Li'
            ].each { devData ->
              developer {
                def devInfo = devData.split(':')
                id = devInfo[0]
                name = devInfo[1]
                url = 'https://github.com/' + devInfo[0]
                roles = ["Core developer"]
              }
            }
          }
          scm {
            url = 'https://github.com/linkedin/iceberg.git'
          }
          issueManagement {
            system = 'GitHub'
            url = 'https://github.com/linkedin/iceberg/issues'
          }
          ciManagement {
            url = 'https://github.com/linkedin/iceberg/actions'
            system = 'GitHub Actions'
          }
        }
      }
    }

    //useful for testing - running "publish" will create artifacts/pom in a local dir
    repositories { maven { url = "$rootProject.buildDir/repo" } }
  }

  //fleshes out problems with Maven pom generation when building
  tasks.build.dependsOn("publishJavaLibraryPublicationToMavenLocal")

  signing {
    if (System.getenv("PGP_KEY")) {
      useInMemoryPgpKeys(System.getenv("PGP_KEY"), System.getenv("PGP_PWD"))
      sign publishing.publications.javaLibrary
    }
  }
}
